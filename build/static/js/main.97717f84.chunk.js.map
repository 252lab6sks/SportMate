{"version":3,"sources":["base.js","Constants.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","app","firebase","initializeApp","auth","App","database","state","email","password","uid","loggedIn","createUser","createUserWithEmailAndPassword","then","response","console","log","_this","setState","user","catch","error","signIn","signInWithEmailAndPassword","signInForm","react_default","a","createElement","Paper_default","className","FormControl_default","margin","required","fullWidth","InputLabel_default","htmlFor","Input_default","id","name","autoComplete","autoFocus","onChange","event","target","value","type","Button_default","variant","color","onClick","dashboard","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8XAKMA,iBAAS,CACXC,OCN6B,0CDO7BC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,iBAGjBC,EAAMC,IAASC,cAAcT,GAEtBU,EAAOF,IAASE,OEkFdC,GFjFGH,IAASI,SAASL,8MENhCM,MAAQ,CACJC,MAAO,GACPC,SAAU,GACVC,IAAK,GACLC,UAAU,KAGdC,WAAa,SAACJ,EAAOC,GACjBL,EAAKS,+BAA+BL,EAAOC,GACtCK,KAAK,SAACC,GACHC,QAAQC,IAAIF,GACZG,EAAKC,SAAS,CACVR,UAAU,EACVD,IAAKK,EAASK,KAAKV,QAG1BW,MAAM,SAAAC,GACHN,QAAQC,IAAIK,QAKxBC,OAAS,SAACf,EAAOC,GACbL,EAAKoB,2BAA2BhB,EAAOC,GAClCK,KAAK,SAACC,GACHC,QAAQC,IAAIF,GACZG,EAAKC,SAAS,CACVR,UAAU,EACVD,IAAKK,EAASK,KAAKV,QAG1BW,MAAM,SAAAC,GACHN,QAAQC,IAAIK,QAIxBG,WAAa,WACT,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAOG,UAAU,SAEbJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAaK,OAAO,SAASC,UAAQ,EAACC,WAAS,GAC3CR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAYS,QAAQ,SAApB,mBACAV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAOW,GAAG,QAAQC,KAAK,QAAQC,aAAa,QAAQC,WAAS,EACtDC,SAAU,SAAAC,GACNzB,EAAKC,SAAS,CAACX,MAAOmC,EAAMC,OAAOC,YAIlDnB,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAaK,OAAO,SAASC,UAAQ,EAACC,WAAS,GAC3CR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAYS,QAAQ,YAApB,cACAV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAOY,KAAK,WAAWO,KAAK,WAAWR,GAAG,WAAWE,aAAa,mBAC3DE,SAAU,SAAAC,GACNzB,EAAKC,SAAS,CAACV,SAAUkC,EAAMC,OAAOC,YAIrDnB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBAEfJ,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAQO,WAAS,EAACc,QAAQ,YAAYC,MAAM,UACpCC,QAAS,kBAAMhC,EAAKK,OAAOL,EAAKX,MAAMC,MAAOU,EAAKX,MAAME,YADhE,YAEAiB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBAChBJ,EAAAC,EAAAC,cAAA,6BAMfuB,UAAY,WACR,OACIzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAOG,UAAU,SACbJ,EAAAC,EAAAC,cAAA,4FAOZ,OAAIwB,KAAK7C,MAAMI,SAGLyC,KAAKD,YAFJC,KAAK3B,oBAlFN4B,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC","file":"static/js/main.97717f84.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport * as env from \"./Constants\";\nimport 'firebase/auth';\nimport 'firebase/database'\n\nconst config = {\n    apiKey: env.REACT_APP_API_KEY,\n    authDomain: \"sportmate-9e1cf.firebaseapp.com\",\n    databaseURL: \"https://sportmate-9e1cf.firebaseio.com\",\n    projectId: \"sportmate-9e1cf\",\n    storageBucket: \"sportmate-9e1cf.appspot.com\",\n    messagingSenderId: \"629833329562\"\n};\n\nconst app = firebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const db = firebase.database(app);\n","export const REACT_APP_API_KEY = \"AIzaSyDLWl9fz-KwBUGFQ33Tj866segMLIbQ4VU\";\n\n","import React, {Component} from 'react';\nimport './App.css';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport {auth} from './base';\n\nclass App extends Component {\n\n    state = {\n        email: '',\n        password: '',\n        uid: '',\n        loggedIn: false\n    };\n\n    createUser = (email, password) => {\n        auth.createUserWithEmailAndPassword(email, password)\n            .then((response) => {\n                console.log(response);\n                this.setState({\n                    loggedIn: true,\n                    uid: response.user.uid\n                });\n            })\n            .catch(error => {\n                console.log(error)\n            });\n\n    };\n\n    signIn = (email, password) => {\n        auth.signInWithEmailAndPassword(email, password)\n            .then((response) => {\n                console.log(response);\n                this.setState({\n                    loggedIn: true,\n                    uid: response.user.uid\n                });\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    };\n\n    signInForm = () => {\n        return(\n            <div>\n                <Paper className=\"paper\">\n\n                    <FormControl margin=\"normal\" required fullWidth>\n                        <InputLabel htmlFor=\"email\"> Email Address </InputLabel>\n                        <Input id=\"email\" name=\"email\" autoComplete=\"email\" autoFocus\n                               onChange={event => {\n                                   this.setState({email: event.target.value});\n                               }}/>\n                    </FormControl>\n\n                    <FormControl margin=\"normal\" required fullWidth>\n                        <InputLabel htmlFor=\"password\"> Password </InputLabel>\n                        <Input name=\"password\" type=\"password\" id=\"password\" autoComplete=\"current-password\"\n                               onChange={event => {\n                                   this.setState({password: event.target.value});\n                               }}/>\n                    </FormControl>\n\n                    <div className=\"buttonSeparator\"/>\n\n                    <Button fullWidth variant=\"contained\" color=\"primary\"\n                            onClick={() => this.signIn(this.state.email, this.state.password)}> Log in </Button>\n                    <div className=\"buttonSeparator\"/>\n                   <textarea>heyy</textarea>\n                </Paper>\n            </div>\n        );\n    };\n\n    dashboard = () => {\n        return(\n            <div>\n                <Paper className=\"paper\">\n                    <h1>Hey</h1>\n                </Paper>\n            </div>\n        )\n    };\n\n    render() {\n        if(!this.state.loggedIn)\n            return this.signInForm();\n        else\n           return this.dashboard();\n\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}